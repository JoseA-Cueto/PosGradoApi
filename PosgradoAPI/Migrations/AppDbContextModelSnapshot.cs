// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PosgradoAPI.DataBaseContext;

#nullable disable

namespace PosgradoAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PosgradoAPI.Core.Models.Actividad", b =>
                {
                    b.Property<int>("id_actividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_actividad"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("area_influencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("fecha_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("fecha_inicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("horas_totales")
                        .HasColumnType("integer");

                    b.Property<string>("id_area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("id_forma_organizativa")
                        .HasColumnType("integer");

                    b.Property<int?>("id_modalidad")
                        .HasColumnType("integer");

                    b.Property<int?>("id_pais")
                        .HasColumnType("integer");

                    b.Property<int?>("id_periodicidad")
                        .HasColumnType("integer");

                    b.Property<int?>("id_programa")
                        .HasColumnType("integer");

                    b.Property<int?>("id_universidad_colaboradora")
                        .HasColumnType("integer");

                    b.Property<int?>("id_universidad_rectora")
                        .HasColumnType("integer");

                    b.Property<int?>("matricula_total")
                        .HasColumnType("integer");

                    b.Property<string>("nombre_actividad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("secretaria_creadora")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("siglas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("total_creditos")
                        .HasColumnType("integer");

                    b.HasKey("id_actividad");

                    b.HasIndex("id_forma_organizativa");

                    b.HasIndex("id_modalidad");

                    b.HasIndex("id_periodicidad");

                    b.ToTable("tb_dactividad", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.CategoriaDocente", b =>
                {
                    b.Property<int>("id_categoria_docente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_categoria_docente"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_categoria_docente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_categoria_docente");

                    b.ToTable("tb_ncategoria_docente", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.CategoriaInvestigativa", b =>
                {
                    b.Property<int>("id_categoria_investigativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_categoria_investigativa"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_categoria_investigativa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_categoria_investigativa");

                    b.ToTable("tb_ncategoria_investigativa", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Convocatoria", b =>
                {
                    b.Property<int>("id_convocatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_convocatoria"));

                    b.Property<bool>("abierta")
                        .HasColumnType("boolean");

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fecha_inicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_actividad")
                        .HasColumnType("integer");

                    b.Property<int>("id_estado_convocatoria")
                        .HasColumnType("integer");

                    b.HasKey("id_convocatoria");

                    b.HasIndex("id_actividad");

                    b.HasIndex("id_estado_convocatoria");

                    b.ToTable("tb_dconvocatoria", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.CuentaPropia", b =>
                {
                    b.Property<int>("id_cuenta_propia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_cuenta_propia"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nombre_cuenta_propia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_cuenta_propia");

                    b.ToTable("tb_ncuenta_propia", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.EstadoConvocatoria", b =>
                {
                    b.Property<int>("id_estado_convocatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_estado_convocatoria"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nombre_estado_convocatoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_estado_convocatoria");

                    b.ToTable("tb_nestado_convocatoria", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.EstadoSolicitud", b =>
                {
                    b.Property<int>("id_estado_solicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_estado_solicitud"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_estado_solicitud")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_estado_solicitud");

                    b.ToTable("tb_nestado_solicitud", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.FormaOrganizativa", b =>
                {
                    b.Property<int>("id_forma_organizativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_forma_organizativa"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_forma_organizativa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_forma_organizativa");

                    b.ToTable("tb_nforma_organizativa", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.GradoCientifico", b =>
                {
                    b.Property<int>("id_grado_cientifico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_grado_cientifico"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_grado_cientifico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sigla")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_grado_cientifico");

                    b.ToTable("tb_ngrado_cientifico", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Modalidad", b =>
                {
                    b.Property<int>("id_modalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_modalidad"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_modalidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_modalidad");

                    b.ToTable("tb_nmodalidad", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Participante", b =>
                {
                    b.Property<string>("id_persona")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("ano_ingreso_educ_superior")
                        .HasColumnType("integer");

                    b.Property<string>("centro_trabajo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("correo_electronico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("cuadro")
                        .HasColumnType("boolean");

                    b.Property<bool>("cuenta_propia")
                        .HasColumnType("boolean");

                    b.Property<string>("direccion_centro_trabajo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("fecha_graduado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("folio_titulo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("foto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("id_carrera")
                        .HasColumnType("integer");

                    b.Property<int?>("id_categoria_docente")
                        .HasColumnType("integer");

                    b.Property<int?>("id_categoria_investigativa")
                        .HasColumnType("integer");

                    b.Property<int?>("id_cuenta_propia")
                        .HasColumnType("integer");

                    b.Property<int?>("id_grado_cientifico")
                        .HasColumnType("integer");

                    b.Property<string>("id_pais_estudios")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("id_universidad")
                        .HasColumnType("integer");

                    b.Property<string>("numero_licencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numero_titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("telefono_centro_trabajo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("tiempo_en_cargo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tomo_titulo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("id_persona");

                    b.HasIndex("id_categoria_docente");

                    b.HasIndex("id_categoria_investigativa");

                    b.HasIndex("id_cuenta_propia");

                    b.HasIndex("id_grado_cientifico");

                    b.ToTable("tb_dparticipante", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Periodicidad", b =>
                {
                    b.Property<int>("id_periodicidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_periodicidad"));

                    b.Property<bool>("activo")
                        .HasColumnType("boolean");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre_periodicidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_periodicidad");

                    b.ToTable("tb_nperiodicidad", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Persona", b =>
                {
                    b.Property<string>("id_persona")
                        .HasColumnType("text");

                    b.Property<string>("id_area")
                        .HasColumnType("text");

                    b.Property<int?>("id_cargo")
                        .HasColumnType("integer");

                    b.Property<bool>("jefe_autorizado")
                        .HasColumnType("boolean");

                    b.HasKey("id_persona");

                    b.ToTable("tb_dpersona", "sq_personal");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Solicitud", b =>
                {
                    b.Property<int>("id_solicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_solicitud"));

                    b.Property<int?>("id_convocatoria")
                        .HasColumnType("integer");

                    b.Property<int?>("id_estado_solicitud")
                        .HasColumnType("integer");

                    b.Property<string>("id_persona")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.HasKey("id_solicitud");

                    b.HasIndex("id_convocatoria");

                    b.HasIndex("id_estado_solicitud");

                    b.HasIndex("id_persona");

                    b.ToTable("tb_dsolicitud", "sq_formacion_postgraduada");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.TomoFolio", b =>
                {
                    b.Property<string>("id_persona")
                        .HasColumnType("text");

                    b.Property<int>("id_actividad")
                        .HasColumnType("integer");

                    b.Property<string>("folio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("id_persona_jefe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("id_persona_profesor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("id_persona_secretaria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("profesor")
                        .HasColumnType("boolean");

                    b.Property<string>("tomo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_persona", "id_actividad");

                    b.HasIndex("id_actividad");

                    b.HasIndex("id_persona_jefe");

                    b.HasIndex("id_persona_profesor");

                    b.HasIndex("id_persona_secretaria");

                    b.ToTable("tb_rtomo_folio_num", "sq_tesis_titulos");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Actividad", b =>
                {
                    b.HasOne("PosgradoAPI.Core.Models.FormaOrganizativa", "formaOrganizativa")
                        .WithMany()
                        .HasForeignKey("id_forma_organizativa");

                    b.HasOne("PosgradoAPI.Core.Models.Modalidad", "modalidad")
                        .WithMany()
                        .HasForeignKey("id_modalidad");

                    b.HasOne("PosgradoAPI.Core.Models.Periodicidad", "periodicidad")
                        .WithMany()
                        .HasForeignKey("id_periodicidad");

                    b.Navigation("formaOrganizativa");

                    b.Navigation("modalidad");

                    b.Navigation("periodicidad");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Convocatoria", b =>
                {
                    b.HasOne("PosgradoAPI.Core.Models.Actividad", "actividad")
                        .WithMany()
                        .HasForeignKey("id_actividad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosgradoAPI.Core.Models.EstadoConvocatoria", "estadoConvocatoria")
                        .WithMany()
                        .HasForeignKey("id_estado_convocatoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actividad");

                    b.Navigation("estadoConvocatoria");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Participante", b =>
                {
                    b.HasOne("PosgradoAPI.Core.Models.CategoriaDocente", "categoriaDocente")
                        .WithMany()
                        .HasForeignKey("id_categoria_docente");

                    b.HasOne("PosgradoAPI.Core.Models.CategoriaInvestigativa", "categoriaInvestigativa")
                        .WithMany()
                        .HasForeignKey("id_categoria_investigativa");

                    b.HasOne("PosgradoAPI.Core.Models.CuentaPropia", "cuentaPropia")
                        .WithMany()
                        .HasForeignKey("id_cuenta_propia");

                    b.HasOne("PosgradoAPI.Core.Models.GradoCientifico", "gradoCientifico")
                        .WithMany()
                        .HasForeignKey("id_grado_cientifico");

                    b.HasOne("PosgradoAPI.Core.Models.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoriaDocente");

                    b.Navigation("categoriaInvestigativa");

                    b.Navigation("cuentaPropia");

                    b.Navigation("gradoCientifico");

                    b.Navigation("persona");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.Solicitud", b =>
                {
                    b.HasOne("PosgradoAPI.Core.Models.Convocatoria", "convocatoria")
                        .WithMany()
                        .HasForeignKey("id_convocatoria");

                    b.HasOne("PosgradoAPI.Core.Models.EstadoSolicitud", "estadoSolicitud")
                        .WithMany()
                        .HasForeignKey("id_estado_solicitud");

                    b.HasOne("PosgradoAPI.Core.Models.Participante", "participante")
                        .WithMany()
                        .HasForeignKey("id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("convocatoria");

                    b.Navigation("estadoSolicitud");

                    b.Navigation("participante");
                });

            modelBuilder.Entity("PosgradoAPI.Core.Models.TomoFolio", b =>
                {
                    b.HasOne("PosgradoAPI.Core.Models.Actividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("id_actividad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosgradoAPI.Core.Models.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosgradoAPI.Core.Models.Persona", "personasJefe")
                        .WithMany()
                        .HasForeignKey("id_persona_jefe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosgradoAPI.Core.Models.Persona", "personaProfesor")
                        .WithMany()
                        .HasForeignKey("id_persona_profesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosgradoAPI.Core.Models.Persona", "personasSecretaria")
                        .WithMany()
                        .HasForeignKey("id_persona_secretaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("persona");

                    b.Navigation("personaProfesor");

                    b.Navigation("personasJefe");

                    b.Navigation("personasSecretaria");
                });
#pragma warning restore 612, 618
        }
    }
}
